#!/bin/sh
#
# git-panic -- The short and safe way to a clean git working tree.
#
# Feel free to contribute to this project at:
#    http://github.com/nvie/git-panic
#
# Copyright (c) 2010 by Vincent Driessen
#

# enable debug mode
if [ "$DEBUG" = "yes" ]; then
	set -x
fi

DOTGIT_DIR=$(git rev-parse --git-dir)
GITPANIC_DIR=$(dirname "$0")

usage() {
	echo "usage: git panic [options]"
}

# shell output
warn() { echo "$@" >&2; }
die() { warn "$@"; exit 1; }

git_local_branches() { git branch | sed 's/^[* ] //'; }
git_remote_branches() { git branch -r | sed 's/^[* ] //'; }
git_all_branches() { ( git branch; git branch -r) | sed 's/^[* ] //'; }
git_all_tags() { git tag; }

git_current_branch() {
	git branch | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

require_git_repo() {
	if ! git rev-parse --git-dir >/dev/null 2>&1; then
		die "fatal: Not a git repository"
	fi
}

main() {
	# must be a git repo
	require_git_repo

	local abort_rebase=0
	local reset_head=0
	local checkout_head=0
	local cleanup_untracked=0
	local update_submodule=0

	echo "Inspecting working tree"

	# abort any running rebases/merges
	if [ -d "${DOTGIT_DIR}/rebase-merge" ]; then
		echo "    Rebase in progress"
		abort_rebase=1
	fi

	# check current cleanness
	if ! git diff-index --cached --quiet --ignore-submodules HEAD --; then
		echo "    Index contains uncommited changes"
		reset_head=1
	fi
	if ! git diff --no-ext-diff --ignore-submodules --quiet --exit-code; then
		echo "    Working tree contains unstaged changes"
		checkout_head=1
	fi
	if ! git status | grep -q 'Untracked'; then
		echo "    Working tree contains untracked files"
		cleanup_untracked=1
	fi

	if [ ! -z "$(git submodule)" ]; then
		echo "    Working tree has submodules"
		update_submodule=1
	fi

	# TODO: Have the user type out 'yes' fully to confirm. We don't want to
	# make it easy to loose any data.
	#if ! ask_confirmation "Are you sure you want to continue?"; then
	#	echo "Nothing changed."
	#	exit 0
	#fi

	# Perform actions
	echo
	echo "Performing cleanup"
	if [ $abort_rebase -eq 1 ]; then
		echo "    git rebase --abort"
		echo "    rm -rf ${DOTGIT_DIR}/rebase-merge"
	fi
	if [ $reset_head -eq 1 ]; then
		echo "    git reset HEAD"
	fi
	if [ $checkout_head -eq 1 ]; then
		echo "    git checkout -- ."
	fi
	if [ $cleanup_untracked -eq 1 ]; then
		echo "    git clean -qdf"
	fi
	if [ $update_submodule -eq 1 ]; then
		echo "    git submodule update"
	fi

	echo
	echo "Working tree now in clean state on branch '$(git_current_branch)'"
}

main "$@"
